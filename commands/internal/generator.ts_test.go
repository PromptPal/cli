package internal

import (
	"fmt"
	"log"
	"strconv"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/suite"
)

type tsLangTypesGenerator struct {
	suite.Suite
}

// Make sure that VariableThatShouldStartAtFive is set to five
// before each test
func (suite *tsLangTypesGenerator) SetupTest() {
}

// All methods that begin with "Test" are run as tests within a
// suite.
func (s *tsLangTypesGenerator) TestEmptyGoTemplate() {
	result, err := GenerateTypeScriptTypes([]PromptSchema{}, &ConfigurationOutputTS{
		Prefix: "PP",
		Output: "./example/types.g.ts",
	})
	assert.Nil(s.T(), err)
	str := string(result)
	assert.Equal(s.T(), len(result), 0)

	assert.Empty(s.T(), str)
}
func (s *tsLangTypesGenerator) TestSchemaGoTemplate() {
	ps := []PromptSchema{}
	for i := 0; i < 10; i++ {
		idx := strconv.Itoa(i)
		variables := []PromptVariable{}

		for j := 0; j < i; j++ {
			jid := strconv.Itoa(j)
			variables = append(variables, PromptVariable{
				Name: "var" + jid,
				Type: "string",
			})
		}
		ps = append(ps, PromptSchema{
			Name:        "test" + idx,
			HashID:      "hashid" + idx,
			Description: "test description " + idx,
			Variables:   variables,
			TokenCount:  100 + i,
			CreatedAt:   time.Date(2022, 1, 1, 0, 0, 0, 0, time.UTC),
		})
	}

	result, err := GenerateTypeScriptTypes(ps, &ConfigurationOutputTS{
		Prefix: "PP",
		Output: "./example/types.g.ts",
	})
	assert.Nil(s.T(), err)
	str := string(result)

	assert.Greater(s.T(), len(result), 0)

	log.Println(str)

	assert.NotEmpty(s.T(), str)
	assert.Contains(s.T(), str, "// generated by PromptPal cli. PLEASE DO NOT EDIT")
	assert.Contains(s.T(), str, "export enum PPPrompts {")
	assert.Contains(s.T(), str, "export type PPPromptTest9Variables = {")

	for i := 0; i < 10; i++ {
		assert.Contains(s.T(), str, fmt.Sprintf("Test%d = \"hashid%d\",", i, i))
		if i < 9 {
			assert.Contains(s.T(), str, fmt.Sprintf("var%d: string;", i))
		}
	}
}

func TestTsLangTypesGeneratorTestSuite(t *testing.T) {
	suite.Run(t, new(tsLangTypesGenerator))
}
